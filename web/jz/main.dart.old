// Copyright (c) 2014, <your name>. All rights reserved. Use of this source code
// is governed by a BSD-style license that can be found in the LICENSE file.

import 'dart:async';
import 'dart:html';
import 'dart:js';
import 'dart:math' as Math;
import 'dart:convert';

const STATE_IDLE                 = 0;
const STATE_CREATING_MATCH       = 1;
const STATE_WAITING_FOR_PLAYERS  = 2;
const STATE_PLAYING              = 3;
const STATE_SCORES               = 4;
const ms = const Duration(milliseconds: 1);

var assets = null;
var canvas = null;
var scale = null;
var ctx = null;
var socialService = null;
var multiplayerService = null;
var usingGameCenter = false; //hint used to show Game cetner Disabled errors;
var loopbackServices = null;
var model = null;
var canvas_width = 0;
var canvas_height = 0;
var boardSize = 0.85 * 500;
var waitingLogin = false;
Math.Random rnd;

void main() {

  rnd = new Math.Random();
  bool isCocoonJS = window.navigator.appVersion.contains("CocoonJS");

  canvas = document.createElement(isCocoonJS ? 'screencanvas' : 'canvas');
  //var dpr = window.devicePixelRatio; // unused
  int w = window.innerWidth;
  int h = window.innerHeight;

  canvas.width = w;
  canvas.height = h;

  scale = Math.min(window.innerHeight / h, window.innerWidth / w);

  canvas.style.position = "absolute";
  canvas.style.width = "${w * scale}px";
  canvas.style.height = "${h * scale}px";
  canvas.style.left = "${window.innerWidth * 0.5 - w * scale * 0.5}px";
  canvas.style.top = "${window.innerHeight * 0.5 - h * scale * 0.5}px";

  document.body.append(canvas);

  canvas_width = w;
  canvas_height = h;

  ctx = canvas.getContext("2d");
  //GAME MODEL

  model = new TicTacToeGameModel(canvas_width, canvas_height, boardSize);

  if (context['Cocoon']['Social']['GameCenter']['nativeAvailable']) {
    var gc = context['Cocoon']['Social']['GameCenter'];
    socialService = gc.callMethod('getSocialInterface', []);
    multiplayerService = gc.callMethod('getMultiplayerInterface', []);
    usingGameCenter = true;
  }
  else if (context['Cocoon']['Social']['GooglePlayGames']['nativeAvailable']) {
    var gp = context['Cocoon']['Social']['GooglePlayGames'];
    //clientId parameter is not required in android
    gp.callMethod('init', [{
        'defaultLeaderboard':'CgkI6vDMyqoYEAIQAA'
    }]);

    socialService = gp.callMethod('getSocialInterface', []);
    multiplayerService = gp.callMethod('getMultiplayerInterface', []);
  } else {
    print("No Native Game Services");
  }

  loopbackServices = [new JsObject(context['Cocoon']['Multiplayer']['LoopbackService'],[]),
                      new JsObject(context['Cocoon']['Multiplayer']['LoopbackService'],[])];

  handleMatch(JsObject match, JsObject error) {

    print(match['matchID']);
    if (!match.hasProperty('matchID')) {
      model.state = STATE_IDLE;
      print(error.hasProperty('message') ? error['message'] : "match canceled!!!");
      return;
    }

    print("match found");
    model.state = STATE_WAITING_FOR_PLAYERS;


    requestPlayersCallback(JsArray players) {

      print('requestPlayersCallback');

//      if (error.hasProperty('message')) {
//        window.alert("requestPlayersInfo:" + error['message']);
//        model.state = STATE_IDLE;
//        return;
//      }
      print("Received players info: ${players}");

      model.initGame(players, model.isMultiplayerGame ? [multiplayerService] : loopbackServices);
      match.callMethod('start', []);
    }

    match.callMethod('on', ["match", new JsObject.jsify({
        'dataReceived':new JsFunction.withThis((match, data, playerID) {

          print("received Data: " + data + " from Player: " + playerID);
          var messsage = JSON.decode(data);

          if (messsage[0] == "token") {
            model.tokenMessageReceived(messsage[1], messsage[2], playerID);
          }
          else if (messsage[0] == "exit" && model.state == STATE_PLAYING && model.isMultiplayerGame) {
            window.alert("Opponent disconnected");
            model.disconnect(false);
          }
          else if (messsage[0] == "turn") {
              model.firstTurnMessageReceived(messsage[1], messsage[2]);
            }
        }),
        'stateChanged':new JsFunction.withThis((match, player, state) {
          print("onMatchStateChanged: " + player + " " + state);

          if (model.state == STATE_WAITING_FOR_PLAYERS && match.getExpectedPlayerCount() == 0) {
            match.requestPlayersInfo(requestPlayersCallback);
          }
        }),
        'connectionWithPlayerFailed':new JsFunction.withThis((match, player, error) {
          window.alert("onMatchConnectionWithPlayerFailed: " + player + " " + error);
          model.disconnect(false);
        }),
        'failed':new JsFunction.withThis((match, error) {
          print("onMatchFailed " + error);
          model.disconnect(false);
        })
    })]);

    // The match might be returned before connections have been established between players. At this stage, all the players are in the process of connecting to each other.
    // Always check the getExpectedPlayerCount value before starting a match. When its value reaches zero, all expected players are connected, and your game can begin the match.
    // If expectedPlayerCount > 0 waint until onMatchStateChanged events
    if (match.callMethod('getExpectedPlayerCount', []) == 0) {
      match.callMethod('requestPlayersInfo', [requestPlayersCallback]);
    }
  }

  loginSocialService(autoLogin) {
    if (!socialService)
      return;

    if (!waitingLogin) {
      waitingLogin = true;
      socialService.login((loggedIn, error){
        if (!loggedIn || error) {
          print("Login failed: " + JSON.encode(error));
          //Tell the user that Game Center is Disabled
          if (!autoLogin && error.code == 2 && usingGameCenter) {
            context['Cocoon']['Dialog'].callMethod('confirm', [{
                'title' : "Game Center Disabled",
                'message' : "Sign in with the Game Center application to enable it",
                'confirmText' : "Ok",
                'cancelText' : "Cancel"
            }, (accepted){
              if(accepted) context['Cocoon'].App.openURL("gamecenter:");
            }]);
          }
        }

        waitingLogin = false;
      });

    }
  }

  //TOUCH EVENTS

  processGameTouch(x,y)
  {

    var rect = canvas.getBoundingClientRect();
    x = x - rect.left;
    y = y - rect.top;

    var clickedExit = x < canvas_width * 0.15 && y > canvas_height * 0.9;

    if (model.state == STATE_IDLE) {

      if (clickedExit) {
        return;
      }

      var request = new JsObject(context['Cocoon']['Multiplayer']['MatchRequest'],[2,2]);
      if (x < canvas_width / 2) {

        if (multiplayerService == null) {
          window.alert("Multiplayer is not supported on this device");
          return;
        }

        if (!socialService.isLoggedIn()) {

          loginSocialService(false);
        }
        else
        {
          model.isMultiplayerGame = true;
          multiplayerService.findMatch(request, handleMatch);
          model.state = STATE_CREATING_MATCH;
        }


      } else {

        model.isMultiplayerGame = false;
        loopbackServices[0].callMethod('findAutoMatch', [request, handleMatch]);
        loopbackServices[1].callMethod('findAutoMatch', [request, (p1, p2){}]); //only listen to the first loopback service delegate
        model.state = STATE_CREATING_MATCH;
      }
    }
    else if (model.state == STATE_CREATING_MATCH) {
      if (clickedExit) {

        if (model.isMultiplayerGame) {
          multiplayerService.cancelAutoMatch();
        }
        else {
          loopbackServices[0].cancelAutomatch();
          loopbackServices[1].cancelAutomatch();
        }

        model.state = STATE_IDLE;
      }
    }
    else if (model.state == STATE_WAITING_FOR_PLAYERS  ) {
        if (clickedExit) {
          model.disconnect(true);
        }
      }
      else if (model.state == STATE_PLAYING) {

          if (clickedExit) {
            model.disconnect(true);
            return;
          }

          var px= x - model.boardRect.x;
          var py= y - model.boardRect.y;
          if (px >= 0 && py>=0 && px<=model.boardRect.w && py <= model.boardRect.h) {
            int col = (px / (model.boardRect.w / 3)).floor;
            int row = (py / (model.boardRect.h / 3)).floor;
            model.putToken(row, col);
          }
        }
        else if (model.state == STATE_SCORES) {
            if (clickedExit) {
              model.disconnect(true);
              return;
            }

            var clickedScores = (x > canvas_width * 0.15 && y > canvas_height * 0.9);
            if(clickedScores){
              if(socialService && socialService.isLoggedIn()){
                model.disconnect(true);
                socialService.showLeaderboard();
              }else{
                window.alert("You must be logged into the Social Service.");
              }
            }
          }

  }

  if (multiplayerService) {

    multiplayerService.on("invitation", {
        'received': () {
          print("Invitation received");
          if (model.state != STATE_IDLE) {
            //simulate exit click
            processGameTouch(0, canvas_height);
          }
          model.state = STATE_CREATING_MATCH;
        },
        'loaded': (match, error) {
          print("Invitation ready: (Error: + " + JSON.encode(error) + ")");
          model.isMultiplayerGame = true;
          handleMatch(match, error);
        }
    });
  }


  //Social Service Login and Score Listeners
  if (socialService) {
    socialService.on("loginStatusChanged",(loggedIn, error){
      if (loggedIn) {
        print("Logged into social service");
        socialService.requestScore((score, error){
          if (error) {
            print("Error getting user score: " + error.message);
          }
          else if (score) {
            print("score: " + score.score);
            model.localUserScore = score.score;
          }
        });
      }
    });

    loginSocialService(true);
  }


  getImages(sources, Function callback) {
    var images = {};
    var imagesTotal = 1;
    var numImages = sources.length;

    sources.forEach((src) {
      images[src] = new ImageElement();
      images[src].addEventListener('load', (e) {
        print("Asset loaded: $src");
        if (imagesTotal++ >= numImages) {
          print("Starting the game :)");
          assets = images;
          callback();
        }
      });

      images[src].src = "images/"+src;
    });
  }

  getImages(["cuadricula.png", "O.png", "exit.png", "scores.png", "X.png","xbuena.png","Obuena.png"],
      () {new Timer.periodic(ms*16, (Timer t){
        if (model.state == STATE_IDLE) {
          renderCreateMatch();
        } else if (model.state == STATE_CREATING_MATCH) {
          renderCreatingMatch();
        } else if (model.state == STATE_WAITING_FOR_PLAYERS) {
          renderWaitingForPlayers();
        } else {
          renderBoard();
        }
      });
    }
  );







  //Check the environment to see if we're executing from CocoonJS or from navigator

  if (isCocoonJS){
    canvas.addEventListener( "touchstart",
        (touchEvent)
    {
      processGameTouch(touchEvent.targetTouches[0].clientX, touchEvent.targetTouches[0].clientY);
    }
    );
  }else{
    canvas.addEventListener( "click",
        (ev)
    {
      processGameTouch(ev.clientX, ev.clientY);
    }
    );
  }

}



//RENDER


renderCreateMatch()
{
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, canvas_width, canvas_height);
  ctx.fillStyle="black";
  ctx.strokeStyle = "black";
  var fontSize = (canvas_width * 0.3).floor() << 0 ;
  if (fontSize > 30) fontSize = 30;
  ctx.font =  "${fontSize}px Helvetica";
  ctx.textAlign = "center";
  ctx.textBaseline = "bottom";
  ctx.fillText("Multiplayer", canvas_width * 0.25, canvas_height * 0.49);
  ctx.textBaseline = "top";
  ctx.fillText("Match", canvas_width * 0.25, canvas_height * 0.51);
  ctx.textBaseline = "bottom";
  ctx.fillText("Local", canvas_width * 0.75, canvas_height * 0.49);
  ctx.textBaseline = "top";
  ctx.fillText("Match", canvas_width * 0.75, canvas_height * 0.51);
  ctx.beginPath();
  ctx.arc(canvas_width * 0.25, canvas_height/2, canvas_width * 0.15, 0, Math.PI * 2, true);
  ctx.stroke();
  ctx.beginPath();
  ctx.arc(canvas_width * 0.75, canvas_height/2, canvas_width * 0.15, 0, Math.PI * 2, true);
  ctx.stroke();

  ctx.textBaseline = "bottom";
  ctx.textAlign = "left";
  if (waitingLogin) {
    ctx.fillText("Logging in...", canvas_width * 0.01, canvas_height * 0.99);
  }
  else if (socialService && socialService.isLoggedIn()) {
    ctx.fillText("Logged In", canvas_width * 0.01, canvas_height * 0.99);
  }
}

renderCreatingMatch()
{
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, canvas_width, canvas_height);
  ctx.fillStyle="black";
  ctx.font = "20pt Helvetica";
  ctx.textAlign = "center";
  ctx.fillText("Searching players for the match...", canvas_width/2, canvas_height/2);
  renderExitButton();
}

renderWaitingForPlayers()
{
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, canvas_width, canvas_height);
  ctx.fillStyle="black";
  ctx.font = "20pt Helvetica";
  ctx.textAlign = "center";
  ctx.fillText("Waiting for all players to be connected...", canvas_width/2, canvas_height/2);
  renderExitButton();
}


renderTokenX(x, y) {
  ctx.drawImage(
      assets["xbuena.png"],
      x,
      y,
      assets["xbuena.png"].width / 2,
      assets["xbuena.png"].height / 2);
}

renderTokenO(x, y) {
  ctx.drawImage(
      assets["Obuena.png"],
      x,
      y,
      assets["Obuena.png"].width / 2,
      assets["Obuena.png"].height / 2);
}

renderPlayersInfo()
{

  ctx.font = "35px Helvetica";
  ctx.textBaseline = "top";
  ctx.fillStyle = "#bbbbbb";

  var first_player_info = {
      'symbol' : model.getPlayerTokensSymbol(0).toUpperCase(),
      'text' : model.getPlayerAlias(0).toUpperCase(),
      'metrics' : {
          'data' : null,
          'textWidth' : null,
          'x' : null
      }
  };

  var second_player_info = {
      'symbol' : model.getPlayerTokensSymbol(1).toUpperCase(),
      'text' : model.getPlayerAlias(1).toUpperCase(),
      'metrics' : {
          'data' : null,
          'textWidth' : null,
          'x' : null
      }
  };

  first_player_info['metrics']['x'] = (first_player_info.symbol == "X" ? canvas_width/2 + assets["X.png"].width : canvas_width/2 + assets["O.png"].width);
  first_player_info['metrics']['data'] = ctx.measureText(first_player_info['text']);
  first_player_info['metrics']['textWidth'] = first_player_info['metrics']['data']['width'];

  second_player_info['metrics']['x'] = (second_player_info.symbol == "X" ? canvas_width/2 + assets["X.png"].width : canvas_width/2 + assets["O.png"].width);
  second_player_info['metrics']['data'] = ctx.measureText(second_player_info['text']);
  second_player_info['metrics']['textWidth'] = second_player_info['metrics']['data']['width'];

  ctx.fillText(first_player_info.text, canvas_width/2 - first_player_info['metrics']['textWidth'] + assets[first_player_info.symbol+".png"].width, canvas_height * 0.01);

  ctx.drawImage(assets[first_player_info.symbol+".png"],
  canvas_width/2 - first_player_info['metrics']['textWidth'] - assets[first_player_info['symbol']+".png"].width - 10,
  canvas_height * 0.017,
  assets[first_player_info['symbol']+".png"].width/2 ,
  assets[first_player_info['symbol']+".png"].height/2
  );

  ctx.fillText(second_player_info['text'], canvas_width/2 + second_player_info['metrics']['textWidth'] / 2 + assets[second_player_info.symbol+".png"].width, canvas_height * 0.01);

  ctx.drawImage(assets[second_player_info['symbol']+".png"],
  canvas_width/2 + second_player_info['metrics']['textWidth'] / 2 - assets[second_player_info['symbol']+".png"].width - 10,
  canvas_height * 0.017,
  assets[second_player_info['symbol']+".png"].width/2 ,
  assets[second_player_info['symbol']+".png"].height/2
  );

  ctx.textBaseline = "bottom";
  ctx.fillText("TURN: " + model.getPlayerTokensSymbol(model.playerTurn), canvas_width * 0.5, canvas_height * 0.99);

}

renderExitButton() {

  ctx.font = "35px Helvetica";
  ctx.fillStyle = "#bbbbbb";
  var offset = 10;
  var text = "Exit";
  TextMetrics metrics = ctx.measureText(text);
  var text_width = metrics.width;
  //var text_height = metrics.height;

  ctx.fillText("EXIT", offset + text_width + assets["exit.png"].width * 0.7, canvas_height - offset * 1.4);
  ctx.drawImage(assets["exit.png"],offset, canvas_height - offset - assets["exit.png"].height);
}

renderScoresButton() {
  ctx.fillStyle = "black";
  ctx.strokeStyle = "black";
  var offset = 5;
  var width = canvas_width * 0.15;
  var height = width * 0.3;
  ctx.strokeRect(canvas_width - offset - width, canvas_height -offset - height, width, height);
  var fontSize = (width * 0.1) << 0 ;
  ctx.font = fontSize + "pt Helvetica";
  ctx.textBaseline = "middle";
  ctx.fillText("SCORES", canvas_width - offset - width * 0.5 ,canvas_height - height/2 - offset);
}

renderBoard() {
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, canvas_width, canvas_height);

  var boardRect = model.boardRect;

  ctx.drawImage(assets["cuadricula.png"],
    (canvas_width - (assets["cuadricula.png"].width / 2)) / 2,
    (canvas_height - (assets["cuadricula.png"].height / 2)) / 2,
    assets["cuadricula.png"].width / 2,
    assets["cuadricula.png"].height / 2
  );

  var row = 0;
  var col = 0;
  for (row = 0; row < 3; ++row) {
    for (col = 0; col < 3; ++col) {
      var x = boardRect.x + boardRect.w * (col == 1 ? 0.315 : (col == 0 ? -0.1 : 0.73));
      var y = boardRect.y + boardRect.h * (row == 1 ? 0.315 : (row == 0 ? -0.1 : 0.73));

      if (model.xTokens[row][col] == 1) {
        renderTokenX(x, y + 20);
      }
      else if (model.oTokens[row][col] == 1) {
        renderTokenO(x, y + 20);
      }

    }
  }

  renderPlayersInfo();
  renderExitButton();

  if (model.state == STATE_SCORES && socialService && socialService.isLoggedIn()) {
    renderScoresButton();
  }
}



class TicTacToeGameModel {

  List<List<int>> oTokens;
  List<List<int>> xTokens;
  var boardRect;
  List players;
  int playerTurn;
  int state;
  bool isMultiplayerGame;
  int localUserScore;
  var playerTokenSelector;

  TicTacToeGameModel(int canvas_width, int canvas_height, int boardSize) {


    oTokens = [[0,0,0],[0,0,0],[0,0,0]];
    xTokens = [[0,0,0],[0,0,0],[0,0,0]];
    boardRect = {'x': canvas_width/2 - boardSize/2, 'y': canvas_height/2-boardSize/2, 'w':boardSize, 'h':boardSize };
    players = [];
    playerTurn = 0;
    state = STATE_IDLE;
    isMultiplayerGame = false;
    localUserScore = 0;
  }

  initGame(JsArray playersInfo, services) {
    oTokens = [[0,0,0],[0,0,0],[0,0,0]];
    xTokens = [[0,0,0],[0,0,0],[0,0,0]];
    players = [
        {'userID': playersInfo[0]['userID'], 'userName': playersInfo[0]['userName']},
        {'userID': playersInfo[1]['userID'], 'userName': playersInfo[1]['userName']}
    ];
    playerTurn = 0;
    playerTokenSelector= 0;

    //order players by ID to sync multiplayer turn order
    players.sort((a,b) {return a['userID'].compareTo(b['userID']);} );


    //get the references to each multiplayer match instance
    for (var i = 0; i < players.length; ++i) {
      players[i]['match'] = null;
      for (var j = 0; j < services.length; ++j) {
        if (services[j] && services[j].getMatch().getLocalPlayerID() == players[i]['userID'] ) {
          players[i]['match'] = services[j].getMatch();
        }
      }
    }

    //Only the first players sends a random value to determine the turn and tokens for each player
    if (players[0]['match'] != null) {
      var firstTurn = rnd.nextDouble() < 0.5 ? 0 : 1;
      var firstPlayerTokens = rnd.nextDouble() < 0.5 ? 0 : 1;
      players[0]['match'].sendDataToAllPlayers(JSON.encode(["turn",firstTurn, firstPlayerTokens]));
    }
  }
  nextTurn() {
    playerTurn = (playerTurn+1) %2;
  }

  isLocalPlayerTurn() {
    return !!players[playerTurn].match;
  }

  isPlayerTurn(index){
    return playerTurn == index;
  }

  getPlayerAlias(index) {
    return players[index].userName;
  }

  getPlayerTokens(index) {
    if (playerTokenSelector == 0) return index == 0 ? xTokens : oTokens;
    if (playerTokenSelector == 1) return index == 1 ? xTokens : oTokens;
  }

  getPlayerTokensSymbol(index) {
    return getPlayerTokens(index) == xTokens ? "X" : "O";
  }

  putToken(row, col) {
    print("putToken " + row + " " + col);
    if (isLocalPlayerTurn() && oTokens[row][col] ==0 && xTokens[row][col] ==0 &&  state == STATE_PLAYING) {
      var message = JSON.encode(["token",row,col]);
      print("sent message: " + message);
      players[playerTurn].match.sendDataToAllPlayers(message);
    }
  }

  tokenMessageReceived(row,col,playerID) {
    var tokens = getPlayerTokens(playerTurn);
    print("tokenMessageReceived: " + row + " " + col);
    tokens[row][col] = 1;
    if (checkWinnerTokens()) {

      state = STATE_SCORES;
      new Timer(ms*100, (){showWinAnimation()});

      //send scores only if it is a multiplayer match and the local player is the winner
      if (isMultiplayerGame && isLocalPlayerTurn() && socialService) {
        localUserScore+=100;
        print("submitScore $localUserScore");
        socialService.submitScore(localUserScore, (error) {
        if (error) {
        print("Error submitting score: " + error);
        }
        else {
        print("Score submitted!");
        }
        });
      }
    }
    else if (checkTieGame()) {
      state = STATE_SCORES;

      new Timer(ms*100, (){showTieAnimation()});
      if (isMultiplayerGame && socialService) {
        localUserScore+=10;
        print("submitScore $localUserScore");
        socialService.submitScore(localUserScore, (error) {
        if (error) {
        print("Error submitting score: " + error);
        }
        else {
        print("Score submitted!");
        }
        });
      }
    }
    else
    {
      nextTurn();
    }

  }
  firstTurnMessageReceived(firstTurn, firstPlayertokens) {
    playerTurn = firstTurn;
    playerTokenSelector = firstPlayertokens;

    state = STATE_PLAYING;
  }

  checkWinnerTokens() {
    var tokens = getPlayerTokens(playerTurn);

    //vertical and horizontal lines
    for (var i = 0; i < 3; ++i) {
      if (tokens[i][0] == 1 && tokens[i][1] == 1 && tokens[i][2] == 1) return true;
      if (tokens[0][i] == 1 && tokens[1][i] == 1 && tokens[2][i] == 1) return true;
    }

    //diagonal lines
    if (tokens[0][0] == 1 && tokens[1][1] ==1 && tokens[2][2] == 1) return true;
    if (tokens[0][2] == 1 && tokens[1][1] ==1 && tokens[2][0] == 1) return true;

    return false;
  }

  checkTieGame() {

    var n = 0;
    for (var i = 0; i< 3; ++i) {
      for (var j = 0; j < 3; ++j ) {
        if (xTokens[i][j] == 1) n++;
        if (oTokens[i][j] == 1) n++;
      }
    }

    return n >=9;
  }

  showWinAnimation() {
    window.alert(players[playerTurn].userName + " Wins");
  }
  showTieAnimation() {
    window.alert("Tie game");
  }

  disconnect(sendMessage) {
    //readyToPlay = false;
    state = STATE_IDLE;
    for (var i = 0; i < players.length; ++i) {
      if (players[i].match != null){
        if (sendMessage){
          players[i].match.sendDataToAllPlayers(JSON.encode(["exit"]));
          players[i].match.disconnect();
        }
      }
    }
  }

}
